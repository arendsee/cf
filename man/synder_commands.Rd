% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rsynder.R
\name{synder_commands}
\alias{synder_commands}
\alias{search}
\alias{filter}
\alias{map}
\alias{count}
\alias{dump}
\title{Synder Commands}
\usage{
search(syn, gff, tcl = "", qcl = "", swap = FALSE, trans = "i", k = 0,
  r = 0, offsets = c(0, 0, 0, 0, 0, 0))

filter(syn, hit, swap = FALSE, trans = "i", k = 0, r = 0,
  offsets = c(0, 0, 0, 0, 0, 0))

map(syn, gff, swap = FALSE, offsets = c(0, 0, 0, 0, 0, 0))

count(syn, gff, swap = FALSE, offsets = c(0, 0, 0, 0, 0, 0))

dump(syn, swap = FALSE, trans = "i", offsets = c(0, 0, 0, 0, 0, 0))
}
\arguments{
\item{syn}{synteny map file name or object}

\item{gff}{GFF file of input intervals}

\item{tcl}{target genome lengths file or object}

\item{qcl}{query genome lengths file or object}

\item{swap}{reverse direction of synteny map (target -> query)}

\item{trans}{synteny map score transform (Synder requires additive scores)
\itemize{
  \item \eqn{i -> f(S) = S}            (default, no transformation)
  \item \eqn{d -> f(S) = L * S}        (transform from score densities)
  \item \eqn{p -> f(S) = L * S / 100}  (transform from percent identity)
  \item \eqn{l -> f(S) = -log(S)}      (transform from e-values or p-values)
}
Where S is input score and L interval length}

\item{k}{Number of interrupting intervals allowed before breaking contiguous
set.}

\item{r}{Score decay rate.}

\item{offsets}{Start and stop offsets (0 or 1) for synteny map, GFF file,
and output.}

\item{hit}{hit map or object}
}
\description{
Synder Commands
}
\section{Inputs}{


The synteny map must be TAB-delimited, with no header, and must have the
following fields:
\enumerate{
  \item qseqid - query contig id (e.g. Chr1)
  \item qstart - query interval start
  \item qstop  - query interval stop
  \item sseqid - target contig id
  \item sstart - target interval start
  \item sstop  - target interval stop
  \item score  - score of the syntenic match*
  \item strand - relative orientation
}
  * score can be any numeric value, it will be
  transformed as specified by the -x option

The target and query genome lengths files must be TAB-delimited with
columns: <name>, <length>
}

\section{Search Command}{


\emph{search} predicts search intervals.

This is the primary function of synder. A set of intervals in one genome (the
query) is mapped to a set of intervals in another genome (the target). The
input intervals may fall between query-side syntenic intervals, in which case,
the search interval also will fall inbetween target syntenic intervals.

The output is a table with the following fields:
\enumerate{
   \item  query interval name (e.g. AT1G20300)
   \item  query chromosome name
   \item  query start position
   \item  query stop position
   \item  target chromosome name
   \item  search interval start position on target chromsome
   \item  search interval stop position on target chromsome
   \item  search interval strand ('+' / '-')
   \item  score
   \item contiguous set id
   \item lower flag
     \itemize{
       \item 0 lower bound is inside a syntenic interval
       \item 1 lower bound is between intervals in a contiguous set
       \item 2 lower bound does not overlap the contiguous set
       \item 3 lower bound is beyond any syntenic interval (near end of scaffold)
     }
   \item upper flag - see lower flag
   \item between flag - 0 if query overlaps a syntenic interval, 1 otherwise
}
}

\section{Filter command}{


\emph{filter} removes links that disagree with the synteny map.

The filter function takes two syntenic maps and finds the congruent links.
Given two syntenic maps, A and B, the query-side intervals in A are mapped to
target side search intervals using the syntenic map B. Then the target-side
intervals in A that overlap the predicted search intervals are printed.

The most obvious usage case takes as input the results of BLASTing a sequence
against a genome. Often such searches will have many hits in a swooping e-value
gradient. The highest scoring hit may not be the orthologous one (for example,
a weakly similar, but long hit may outscore the nearly identical, but
truncated, true ortholog). `synder filter` will find the hits that are
concordant with genomic context, reducing possibly thousands of hits to only
a few.
}

\section{Map command}{


Find all query-side syntenic blocks that overlap the input interval. Then map
these blocks to the target-side and print the result. If an input interval
overlaps no query bock, the flanks are printed.

The output will have the columns:o 
\enumerate{
  \item input interval name (e.g. AT1G01010)
  \item target contig name (e.g. Chr1)
  \item target start position
  \item target stop position
  \item missing flag, 0 if input overlaps no block, 1 otherwise
}
}

\section{Count command}{


Like map except it counts the number of overlaps, rather than printing them.
The output is a TAB-delimited list of sequence names and counts.
}

\section{Dump command}{


Builds the internal synteny datastructure and prints the results.

For example, given the file

\preformatted{
que   100    200    tar   1100   1200   100   +
que   1100   1800   tar   1500   1900   100   +
que   1400   1700   tar   1600   2000   100   +
que   1200   1600   tar   1700   2100   100   +
que   1300   1900   tar   1800   2200   100   +
}

\preformatted{
R> synder::dump('que-tar.syn', trans='p')
que  100   200   tar  1100  1200  101.000000  +  0
que  1100  1900  tar  1500  2200  700.084964  +  0
}

In the above example, \code{dump} shows that blocks 2-5 are merged (since
they are doubly-overlapping) and shows the results of the score
transformations. It is this dumped synteny map that would have been used in
any filter or search operations.

Also note the addition of a 9th column. This column specifies that contiguous
set. In this case, all blocks, after merging, are in the same set.
}

